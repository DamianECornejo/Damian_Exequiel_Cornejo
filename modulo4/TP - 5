"Ejercicio 1"
"1. Lista el apellido de todos los empleados."
SELECT apellido from empleados;

"2. Lista el apellido de los empleados eliminando los apellidos que estén repetidos."
SELECT DISTINCTROW apellido FROM empleados;

"3. Lista todas las columnas de la tabla empleados."
SELECT * FROM sistema.empleados;

"4. Lista el nombre y apellido de todos los empleados."
SELECT concat(apellido, ', ', nombre) as empleado from empleados;

"5. Lista el cuit/cuil de los departamentos de los empleados que aparecen en la tabla
empleados."
SELECT cuil_cuit, nombre, apellido from empleados;

"6. Lista el nombre y apellido de los empleados en una única columna."
SELECT concat_ws(', ', nombre, apellido) as empleado FROM empleados;

"7. Lista el nombre y apellido de los empleados en una única columna, convirtiendo todos los
caracteres en mayúscula."
SELECT upper(concat_ws(', ', nombre, apellido)) as empleado en MAYUSCULA FROM empleados;

"8. Lista el nombre y apellido de los empleados en una única columna, convirtiendo todos los
caracteres en minúscula."
SELECT LOWER(concat_ws(', ', nombre, apellido)) as empleado en minuscula FROM empleados;

"9. Lista el nombre de los departamentos y el valor del presupuesto actual ordenado de forma
ascendente."
SELECT nombre, presupuesto from departamentos
ORDER BY presupuesto ASC;

"10. Lista el nombre de todos los departamentos ordenados de forma ascendente."
SELECT nombre from departamentos
ORDER BY nombre ASC;

"11. Lista el nombre de todos los departamentos ordenados de forma descendente."
SELECT nombre from departamentos
ORDER BY nombre DESC;

"12. Lista el apellido y el nombre de todos los empleados, ordenados de forma alfabética
tendiendo en cuenta en primer lugar su apellido y luego su nombre."
SELECT concat_ws(', ', apellido, nombre) as empleado FROM empleados
ORDER BY apellido, nombre ASC;

"13. Devuelve una lista con el nombre y el presupuesto, de los 3 departamentos que tienen
mayor presupuesto."
SELECT nombre, presupuesto from departamentos
ORDER BY presupuesto DESC LIMIT 3;

"14. Devuelve una lista con el nombre y el presupuesto, de los 3 departamentos que tienen
menor presupuesto."
SELECT nombre, presupuesto from departamentos
ORDER BY presupuesto ASC LIMIT 3;

"15. Devuelve una lista con el nombre de los departamentos y el presupuesto, de aquellos que
tienen un presupuesto mayor o igual a $150000."
SELECT nombre, presupuesto from departamentos
WHERE presupuesto >= 150000;

"16. Devuelve una lista con el nombre de los departamentos y el presupuesto, de aquellos que
tienen un presupuesto entre $100000 y $200000. Sin utilizar el operador BETWEEN."
SELECT nombre, presupuesto FROM departamentos
WHERE presupuesto >= 100000 AND  presupuesto <= 200000;

"17. Devuelve una lista con el nombre de los departamentos que no tienen un presupuesto
entre $100000 y $200000. Sin utilizar el operador BETWEEN."
SELECT nombre, presupuesto FROM departamentos
WHERE NOT (presupuesto >= 100000 AND  presupuesto <= 200000);

"18. Devuelve una lista con el nombre de los departamentos que tienen un presupuesto entre
$100000 y $200000. Utilizando el operador BETWEEN."
SELECT nombre, presupuesto FROM departamentos
WHERE presupuesto BETWEEN 100000 AND 200000;

"19. Devuelve una lista con el nombre de los departamentos que no tienen un presupuesto
entre $100000 y $200000. Utilizando el operador BETWEEN."
SELECT nombre, presupuesto FROM departamentos
WHERE presupuesto NOT BETWEEN 100000 AND 200000;

"20. Devuelve un listado con los empleados y los datos de los departamentos donde trabaja cada
uno."
SELECT EMPLEADOS.nombre, apellido, DEPARTAMENTOS.nombre
FROM EMPLEADOS INNER JOIN DEPARTAMENTOS
ON EMPLEADOS.id_departamento = iddepartamento;

"21. Devuelve un listado con los empleados y los datos de los departamentos donde trabaja cada
uno. Ordena el resultado, en primer lugar por el nombre del departamento (en orden
alfabético) y en segundo lugar por apellido y el nombre de los empleados."
SELECT EMPLEADOS.nombre, apellido, DEPARTAMENTOS.nombre
FROM EMPLEADOS INNER JOIN DEPARTAMENTOS
ON EMPLEADOS.id_departamento = iddepartamento
ORDER BY DEPARTAMENTOS.nombre, EMPLEADOS.apellido, EMPLEADOS.nombre;

"22. Devuelve un listado con el código y el nombre del departamento, solamente de aquellos
departamentos que tienen empleados."
SELECT EMPLEADOS.nombre, apellido, DEPARTAMENTOS.nombre
FROM EMPLEADOS INNER JOIN DEPARTAMENTOS
ON EMPLEADOS.id_departamento = iddepartamento
ORDER BY DEPARTAMENTOS.nombre, EMPLEADOS.apellido, EMPLEADOS.nombre;

"23. Devuelve el nombre del departamento donde trabaja el empleado que tiene el cuit
27-38382980-3."
SELECT EMPLEADOS.cuil_cuit, DEPARTAMENTOS.nombre
FROM EMPLEADOS INNER JOIN DEPARTAMENTOS
ON EMPLEADOS.id_departamento = iddepartamento
WHERE cuil_cuit = "27-38382980-3";

"24. Devuelve el nombre del departamento donde trabaja el empleado Pepe Ruiz."
SELECT apellido,EMPLEADOS.nombre,DEPARTAMENTOS.nombre
FROM EMPLEADOS INNER JOIN DEPARTAMENTOS
ON EMPLEADOS.id_departamento = iddepartamento
WHERE apellido = "Ruiz" AND EMPLEADOS.nombre = "Pepe";

"25. Devuelve un listado con los datos de los empleados que trabajan en el departamento de
I+D. Ordena el resultado alfabéticamente."
SELECT apellido,EMPLEADOS.nombre,DEPARTAMENTOS.nombre
FROM EMPLEADOS INNER JOIN DEPARTAMENTOS
ON EMPLEADOS.id_departamento = iddepartamento
WHERE DEPARTAMENTOS.nombre = "I+D"
order by apellido, empleados.nombre asc;

"26. Devuelve un listado con los datos de los empleados que trabajan en el departamento de
Sistemas, Contabilidad o I+D. Ordena el resultado alfabéticamente."
SELECT apellido,EMPLEADOS.nombre,DEPARTAMENTOS.nombre
FROM EMPLEADOS INNER JOIN DEPARTAMENTOS
ON EMPLEADOS.id_departamento = iddepartamento
WHERE (departamentos.nombre= "I+D") or (DEPARTAMENTOS.nombre = "Sistemas") or (DEPARTAMENTOS.nombre = "Contabilidad")
order by apellido, empleados.nombre asc;

"27. Devuelve una lista con el nombre de los empleados que tienen los departamentos que no
tienen un presupuesto entre $100000 y $200000."
SELECT apellido,EMPLEADOS.nombre,presupuesto
FROM EMPLEADOS INNER JOIN DEPARTAMENTOS
ON EMPLEADOS.id_departamento = iddepartamento
WHERE presupuesto between 100000 and 200000;

"Ejercicio 2"
"1. Devuelve un listado con todos los pedidos que se han realizado. Los pedidos deben estar
ordenados por la fecha de realización, mostrando en primer lugar los pedidos más recientes."
SELECT * FROM ventas.pedidos
ORDER BY fecha desc;

"2. Devuelve todos los datos de los dos pedidos de mayor valor."
SELECT * FROM ventas.pedidos
ORDER BY cantidad desc limit 2;

"3. Devuelve un listado con los identificadores de los clientes que han realizado algún pedido.
Tenga en cuenta que no debe mostrar identificadores que estén repetidos."
SELECT distinctrow id_cliente FROM ventas.pedidos
where id_cliente = id_cliente;

"4. Devuelve un listado de todos los pedidos que se realizaron durante el año 2022, cuya
cantidad total sea superior a $500."
SELECT * FROM ventas.pedidos
WHERE fecha BETWEEN '2022-01-01' AND '2022-12-31' and (cantidad > 500);

"5. Devuelve un listado con el nombre y apellido de los vendedores que tienen una comisión
entre 0.05 y 0.11."
SELECT vendedores.nombre, apellido,comisión FROM ventas.vendedores
WHERE comisión between 0.05 AND 0.11;

"6. Devuelve el valor de la comisión de mayor valor que existe en la tabla vendedores."
SELECT vendedores.nombre, apellido,comisión FROM ventas.vendedores
ORDER BY comisión desc limit 1;

"7. Devuelve el identificador, nombre y primer apellido de aquellos clientes cuyo cuitcuil no es
NULL. El listado deberá estar ordenado alfabéticamente por apellido y nombre."
SELECT id,apellido,nombre,cuitcuil FROM ventas.clientes
where cuitcuil is not null;

"8. Devuelve un listado de los nombres de los clientes que empiezan por “A” y terminan por “n” y
también los nombres que empiezan por “P”. El listado deberá estar ordenado
alfabéticamente."
SELECT apellido,nombre FROM ventas.clientes
WHERE nombre LIKE "A%n" OR nombre LIKE "P%";
ORDER BY nombre asc;

"9. Devuelve un listado de los nombres de los clientes que no empiezan por “A”. El listado deberá
estar ordenado alfabéticamente."
SELECT apellido,nombre FROM ventas.clientes
WHERE nombre NOT LIKE "A%"
ORDER BY nombre asc;

"10.Devuelve un listado con los nombres de los vendedores que terminan por “el” o “o”. Tenga en
cuenta que se deberán eliminar los nombres repetidos."
SELECT apellido,nombre FROM ventas.vendedores
WHERE nombre LIKE "%el" or nombre LIKE "%o";

"11.Devuelve un listado con el identificador, nombre y apellido de todos los clientes que han
realizado algún pedido. El listado debe estar ordenado alfabéticamente y se deben eliminar
los elementos repetidos."
SELECT DISTINCT Clientes.id, nombre, apellido FROM clientes  
INNER JOIN pedidos ON clientes.id = pedidos.id_cliente
ORDER BY clientes.apellido,nombre ASC;

"12.Devuelve un listado que muestre todos los pedidos que ha realizado cada cliente. El resultado
debe mostrar todos los datos de los pedidos y del cliente. El listado debe mostrar los datos de
los clientes ordenados alfabéticamente."
SELECT pedidos.fecha,cantidad, clientes.id,nombre,apellido from pedidos
INNER JOIN clientes
ON clientes.id = pedidos.id_cliente
order by clientes.apellido,nombre asc;

"13.Devuelve un listado que muestre todos los pedidos en los que ha participado un vendedor. El
resultado debe mostrar todos los datos de los pedidos y de los vendedores. El listado debe
mostrar los datos de los vendedores ordenados alfabéticamente."
SELECT pedidos.fecha,cantidad, vendedores.id,nombre,apellido from pedidos
INNER JOIN vendedores
ON vendedores.id = pedidos.id_vendedor
order by vendedores.apellido,nombre asc;

"14.Devuelve un listado que muestre todos los clientes, con todos los pedidos que han realizado y
con los datos de los vendedores asociados a cada pedido."
SELECT vendedores.nombre,vendedores.apellido, pedidos.cantidad,fecha, clientes.nombre, vendedores.apellido from pedidos
INNER join vendedores on vendedores.id = pedidos.id_vendedor
INNER join clientes on clientes.id = pedidos.id_cliente;

"15.Devuelve un listado de todos los clientes que realizaron un pedido durante el año 2022, cuyo
monto esté entre $300 y $1000."
SELECT clientes.id,nombre,apellido, pedidos.fecha,cantidad from pedidos
INNER join clientes on clientes.id = pedidos.id_cliente
WHERE (fecha between "2022-01-01" and "2022-12-31") and (cantidad between 300 and 1000);

"16.Devuelve el nombre y apellido de todos los vendedores que han participado en algún pedido
realizado por María Santana."
SELECT vendedores.nombre,vendedores.apellido,  pedidos.fecha,cantidad,  clientes.apellido, clientes.nombre from pedidos
INNER join vendedores on vendedores.id = pedidos.id_cliente
INNER join clientes on clientes.id = pedidos.id_cliente
WHERE (clientes.nombre = "María") and (clientes.apellido = "Santana");

"17.Devuelve el nombre de todos los clientes que han realizado algún pedido con el vendedor
Daniel Sáez."
SELECT  clientes.nombre, clientes.apellido, pedidos.id, cantidad, fecha, vendedores.nombre, vendedores.apellido from pedidos
INNER join vendedores on vendedores.id = pedidos.id_vendedor
INNER join clientes on clientes.id = pedidos.id_cliente
WHERE (vendedores.nombre = "Daniel") and (vendedores.apellido = "Sáez");

"18.Devuelve un listado con todos los clientes junto con los datos de los pedidos que han
realizado. Este listado también debe incluir los clientes que no han realizado ningún pedido.
El listado debe estar ordenado alfabéticamente por el apellido y nombre de los clientes."
SELECT clientes.id, nombre, apellido from pedidos
right join clientes on clientes.id = pedidos.id_cliente 
order by clientes.apellido, nombre asc;

"19.Devuelve un listado con todos los vendedores junto con los datos de los pedidos que han
realizado. Este listado también debe incluir los vendedores que no han realizado ningún
pedido. El listado debe estar ordenado alfabéticamente por el apellido y nombre de los
vendedores."
SELECT vendedores.id, nombre, apellido from pedidos
right join vendedores on vendedores.id = pedidos.id_vendedor
order by vendedores.apellido, nombre asc;

"20.Devuelve un listado que solamente muestre los clientes que no han realizado ningún pedido."
select clientes.id,apellido,nombre  from pedidos 
right join clientes  on pedidos.id_cliente = clientes.id 
where id_cliente is null;

"21.Devuelve un listado que solamente muestre los vendedores que no han realizado ningún
pedido."
select vendedores.id,apellido,nombre  from pedidos 
right join vendedores  on pedidos.id_vendedor = vendedores.id 
where id_vendedor is null;

"22.Devuelve un listado con los clientes que no han realizado ningún pedido y de los vendedores
que no han participado en ningún pedido. Ordene el listado alfabéticamente por el apellido y
el nombre. En el listado deberá diferenciar de algún modo los clientes y los vendedores."
SELECT clientes.id, nombre, apellido FROM pedidos
right JOIN clientes ON clientes.id = pedidos.id_cliente
WHERE pedidos.id_cliente IS NULL
union SELECT vendedores.id,nombre,apellido FROM pedidos
right JOIN vendedores ON vendedores.id = pedidos.id_vendedor
WHERE pedidos.id_vendedor IS NULL

"23.Calcula la cantidad total que suman todos los pedidos que aparecen en la tabla pedido."
select sum(cantidad) from pedidos;

"24.Calcula la cantidad media de todos los pedidos que aparecen en la tabla pedido."
select avg(cantidad) from pedidos;

"25.Calcula el número total de vendedores distintos que aparecen en la tabla pedido."
select count(distinct clientes.id) from clientes
inner join pedidos on clientes.id = pedidos.id_cliente;

"26.Calcula el número total de clientes que aparecen en la tabla cliente."
select count(clientes.id) from clientes;

"27.Calcula cuál es la mayor cantidad que aparece en la tabla pedido."
select max(cantidad) from pedidos;

"28.Calcula cuál es la menor cantidad que aparece en la tabla pedido."
select min(cantidad) from pedidos;

"29.Calcula cuál es el valor máximo de categoría para cada una de las ciudades que aparece en la
tabla cliente."
select ciudad, max(categoría) from clientes
group by ciudad;

"30.Calcula cuál es el máximo valor de los pedidos realizados durante el mismo día para cada uno
de los clientes. Es decir, el mismo cliente puede haber realizado varios pedidos de diferentes
cantidades el mismo día. Se pide que se calcule cuál es el pedido de máximo valor para cada
uno de los días en los que un cliente ha realizado un pedido. Muestra el identificador del
cliente, nombre, apellido, la fecha y el valor de la cantidad."
SELECT max(pedidos.cantidad) as Max_Pedido, fecha, id_cliente, clientes.nombre, clientes.apellido  from ventas.pedidos 
inner join ventas.clientes ON ventas.clientes.id=ventas.pedidos.id_cliente
group by ventas.pedidos.id_cliente, ventas.pedidos.fecha

"31.Calcula cuál es el máximo valor de los pedidos realizados durante el mismo día para cada uno
de los clientes, teniendo en cuenta que sólo queremos mostrar aquellos pedidos que superen
la cantidad de $2000."
select id_cliente,fecha, max(cantidad) from pedidos 
where cantidad > 2000
group by fecha ;

"32.Calcula el máximo valor de los pedidos realizados para cada uno de los vendedores durante la
fecha 2021-08-17. Muestra el identificador del vendedor, nombre, apellido y total."
select id_vendedor,fecha, max(cantidad), vendedores.nombre, apellido from pedidos
inner join vendedores on vendedores.id = pedidos.id_vendedor
where (fecha = "2021-08-17") 
group by cantidad;

"33.Devuelve un listado con el identificador de cliente, nombre y apellido y el número total de
pedidos que ha realizado cada uno de los clientes. Tenga en cuenta que pueden existir
clientes que no han realizado ningún pedido. Estos clientes también deben aparecer en el
listado indicando que el número de pedidos realizados es 0."
select clientes.id, nombre, apellido, count(pedidos.id)  from pedidos
right join clientes on pedidos.id_cliente = clientes.id
group by clientes.id;

"34.Devuelve un listado con el identificador de cliente, nombre, apellido y el número total de
pedidos que ha realizado cada uno de clientes durante el año 2020."
select clientes.id, nombre, apellido, count(pedidos.id), fecha  from pedidos
right join clientes on pedidos.id_cliente = clientes.id
where fecha between "2020-01-01" and "2020-12-31"
group by clientes.id;

"35.Devuelve cuál ha sido el pedido de máximo valor que se ha realizado cada año."

"36.Devuelve el número total de pedidos que se han realizado cada año."

"37.Devuelve un listado con todos los pedidos que ha realizado Adela Salas. (Sin utilizar INNER
JOIN)."
SELECT * FROM pedidos
WHERE id_cliente = (SELECT id  FROM clientes WHERE nombre = 'Adela' AND apellido = 'Salas')

"38.Devuelve el número de pedidos en los que ha participado el vendedor Daniel Sáe. (Sin utilizar
INNER JOIN)"
SELECT * FROM pedidos
WHERE id_vendedor = (SELECT id  FROM vendedores WHERE nombre = 'Daniel' AND apellido = 'Sáez')

"39.Devuelve los datos del cliente que realizó el pedido más caro en el año 2020. (Sin utilizar
INNER JOIN)"
SELECT * FROM clientes 
WHERE id = (SELECT id_cliente FROM pedidos WHERE cantidad = (SELECT MAX(cantidad) FROM pedidos WHERE FECHA LIKE '%2020%'))

"40.Devuelve la fecha y la cantidad del pedido de menor valor realizado por el cliente Pepe Ruiz
Santana."
SELECT Fecha, min(cantidad) FROM pedidos
WHERE id_cliente = (SELECT id FROM clientes WHERE nombre = "Pepe" AND apellido = "Ruiz");

"41.Devuelve un listado de los clientes que no han realizado ningún pedido. (Utilizando IN o NOT
IN)."
SELECT * FROM clientes
WHERE id NOT IN (SELECT id_cliente FROM pedidos);

"42.Devuelve un listado de los vendedores que no han realizado ningún pedido. (Utilizando IN o
NOT IN)."
SELECT * FROM vendedores
WHERE id NOT IN (SELECT id_vendedor FROM pedidos);

"43.Devuelve un listado de los clientes que no han realizado ningún pedido. (Utilizando EXISTS o
NOT EXISTS)."
SELECT *
FROM clientes
WHERE NOT EXISTS (SELECT id_cliente FROM pedidos WHERE clientes.id = pedidos.id_cliente);

"44.Devuelve un listado de los vendedores que no han realizado ningún pedido. (Utilizando
EXISTS o NOT EXISTS)."
SELECT * FROM vendedores
WHERE NOT EXISTS (SELECT id_vendedor FROM pedidos WHERE vendedores.id = pedidos.id_vendedor);
